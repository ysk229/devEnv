version: '3'

networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
  backend:
    driver: ${NETWORKS_DRIVER}

services:
### PHP-FPM ##############################################
    php-fpm:
      build:
        context: ./php-fpm
        args:
          - D_PHP_VERSION=${PHP_VERSION}
          ####注掉此参数，不能会编译此扩展，修改此处得重新编译镜像 docker-compose build
          - D_PHP_SWOOLE=${PHP_SWOOLE}
          - D_PHP_MONGODB=${PHP_MONGODB}
          - D_PHP_XHPROF=${PHP_XHPROF}
          - D_PHP_XDEBUG=${PHP_XDEBUG}
          - D_PHP_VLD=${PHP_VLD}
          - D_PHP_CPHALCON7=${PHP_CPHALCON7}
          #修改更新源
          #- D_CHANGE_SOURC_APTE=true
      volumes:
        - ./php-fpm/php${PHP_VERSION}.ini:/usr/local/etc/php/php.ini
        - ./php-fpm/mod:/usr/local/etc/php/conf.d/mod/
        - ./php-fpm/conf.d:/usr/local/etc/php-fpm.d/cfg.d/
        #与nginx 目录绑定，要不然PHP不知道是那个目录
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
      expose:
        - ${NGINX_PHP_UPSTREAM_PORT}
      networks:
        - backend
### NGINX Server ##############################################
    nginx:
      build:
        context: ./nginx
        args:
          - D_PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}
          - D_PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}
      volumes:
        - ./nginx/nginx.conf:/etc/nginx/nginx.conf
        - ./nginx/cfg.d/:/etc/nginx/conf.d/cfg.d/
        - ./nginx/log/:/var/log/nginx
        #配置web目录
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
      ports:
        - "${NGINX_HOST_HTTP_PORT}:80"
        - "${NGINX_HOST_HTTPS_PORT}:443"
      depends_on:
        - php-fpm
      networks:
        - frontend
        - backend

### Redis ################################################
    redis:
      build: ./redis
      volumes:
        - ./redis/redis.conf:/etc/redis/6379.conf
        - ${DATA_PATH_HOST}/redis:/data
      ports:
        - "${REDIS_PORT}:6379"
      networks:
        - backend

### MySQL ################################################
    mysql:
      build:
        context: ./mysql
        args:
          - MYSQL_VERSION=${MYSQL_VERSION}
      environment:
        - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
        - TZ=${WORKSPACE_TIMEZONE}
      volumes:
        - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf
        - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
      ports:
        - "${MYSQL_PORT}:3306"
      networks:
        - backend

### MongoDB ##############################################
    mongodb:
      build: ./mongodb
      ports:
        - "${MONGODB_PORT}:27017"
      environment:
        - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
        - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      volumes:
        - ./mongodb/mongo.conf:/etc/mongod.conf
        - ${DATA_PATH_HOST}/mongodb:/data/db
      networks:
        - backend

##@seen https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html#docker-cli-run-dev-mode
##@seen https://segmentfault.com/a/1190000018606414
### ElasticSearch #####默认用户名密码 elastic/changeme###################################
    elasticsearch:
      tty: true
      build: ./elasticsearch
      volumes:
        #chown -R 1000:1000  ${DATA_PATH_HOST}/elasticsearch 要不然不能启动
        - ${DATA_PATH_HOST}/elasticsearch/data/:/usr/share/elasticsearch/data
      environment:
        - cluster.name=cluster
        #锁定进程的物理内存地址避免交换（swapped）来提高性能
        - bootstrap.memory_lock=true
        #单体
        - discovery.type=single-node
        #集群
        #- node.name=es01
        #- discovery.seed_hosts=es02
        #- cluster.initial_master_nodes=es01,es02
        ##使用 ES_JAVA_OPTS 环境变量来设置堆大小，例如使用 16GB 通过使用 -e ES_JAVA_OPTS=-Xms16g -Xms16g" 和 dcker run 来运行。 还建议为容器设置内存限制。
        - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      ulimits:
        memlock:
          soft: -1
          hard: -1
      ports:
        ##镜像公开 TCP 端口 9200 和 9300。对于群集，建议使用 --publish-all 随机化已发布的端口，除非您为每个主机固定一个容器
        - "${ELASTICSEARCH_HOST_HTTP_PORT}:9200"
        - "${ELASTICSEARCH_HOST_TRANSPORT_PORT}:9300"
      networks:
        - frontend
        - backend

### RabbitMQ #############################################
    rabbitmq:
      build: ./rabbitmq
      ports:
        - "${RABBITMQ_NODE_HOST_PORT}:5672"
        - "${RABBITMQ_MANAGEMENT_HTTP_HOST_PORT}:15672"
        - "${RABBITMQ_MANAGEMENT_HTTPS_HOST_PORT}:15671"
      privileged: true
      environment:
        - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
        - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      networks:
        - backend